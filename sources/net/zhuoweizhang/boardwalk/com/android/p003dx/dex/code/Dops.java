package net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code;

import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.DexOptions;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form10t;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form10x;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form11n;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form11x;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form12x;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form20t;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form21c;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form21h;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form21s;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form21t;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form22b;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form22c;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form22s;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form22t;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form22x;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form23x;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form30t;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form31c;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form31i;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form31t;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form32x;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form35c;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form3rc;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.Form51l;
import net.zhuoweizhang.boardwalk.com.android.p003dx.dex.code.form.SpecialFormat;

/* renamed from: net.zhuoweizhang.boardwalk.com.android.dx.dex.code.Dops */
public final class Dops {
    public static final Dop ADD_DOUBLE;
    public static final Dop ADD_DOUBLE_2ADDR;
    public static final Dop ADD_FLOAT;
    public static final Dop ADD_FLOAT_2ADDR;
    public static final Dop ADD_INT;
    public static final Dop ADD_INT_2ADDR;
    public static final Dop ADD_INT_LIT16;
    public static final Dop ADD_INT_LIT8;
    public static final Dop ADD_LONG;
    public static final Dop ADD_LONG_2ADDR;
    public static final Dop AGET;
    public static final Dop AGET_BOOLEAN;
    public static final Dop AGET_BYTE;
    public static final Dop AGET_CHAR;
    public static final Dop AGET_OBJECT;
    public static final Dop AGET_SHORT;
    public static final Dop AGET_WIDE;
    public static final Dop AND_INT;
    public static final Dop AND_INT_2ADDR;
    public static final Dop AND_INT_LIT16;
    public static final Dop AND_INT_LIT8;
    public static final Dop AND_LONG;
    public static final Dop AND_LONG_2ADDR;
    public static final Dop APUT;
    public static final Dop APUT_BOOLEAN;
    public static final Dop APUT_BYTE;
    public static final Dop APUT_CHAR;
    public static final Dop APUT_OBJECT;
    public static final Dop APUT_SHORT;
    public static final Dop APUT_WIDE;
    public static final Dop ARRAY_LENGTH;
    public static final Dop CHECK_CAST;
    public static final Dop CMPG_DOUBLE;
    public static final Dop CMPG_FLOAT;
    public static final Dop CMPL_DOUBLE;
    public static final Dop CMPL_FLOAT;
    public static final Dop CMP_LONG;
    public static final Dop CONST;
    public static final Dop CONST_16;
    public static final Dop CONST_4;
    public static final Dop CONST_CLASS;
    public static final Dop CONST_HIGH16;
    public static final Dop CONST_STRING;
    public static final Dop CONST_STRING_JUMBO;
    public static final Dop CONST_WIDE;
    public static final Dop CONST_WIDE_16;
    public static final Dop CONST_WIDE_32;
    public static final Dop CONST_WIDE_HIGH16;
    public static final Dop DIV_DOUBLE;
    public static final Dop DIV_DOUBLE_2ADDR;
    public static final Dop DIV_FLOAT;
    public static final Dop DIV_FLOAT_2ADDR;
    public static final Dop DIV_INT;
    public static final Dop DIV_INT_2ADDR;
    public static final Dop DIV_INT_LIT16;
    public static final Dop DIV_INT_LIT8;
    public static final Dop DIV_LONG;
    public static final Dop DIV_LONG_2ADDR;
    private static final Dop[] DOPS = new Dop[NativeDefinitions.EV_VERSION];
    public static final Dop DOUBLE_TO_FLOAT;
    public static final Dop DOUBLE_TO_INT;
    public static final Dop DOUBLE_TO_LONG;
    public static final Dop FILLED_NEW_ARRAY;
    public static final Dop FILLED_NEW_ARRAY_RANGE;
    public static final Dop FILL_ARRAY_DATA;
    public static final Dop FLOAT_TO_DOUBLE;
    public static final Dop FLOAT_TO_INT;
    public static final Dop FLOAT_TO_LONG;
    public static final Dop GOTO;
    public static final Dop GOTO_16;
    public static final Dop GOTO_32;
    public static final Dop IF_EQ;
    public static final Dop IF_EQZ;
    public static final Dop IF_GE;
    public static final Dop IF_GEZ;
    public static final Dop IF_GT;
    public static final Dop IF_GTZ;
    public static final Dop IF_LE;
    public static final Dop IF_LEZ;
    public static final Dop IF_LT;
    public static final Dop IF_LTZ;
    public static final Dop IF_NE;
    public static final Dop IF_NEZ;
    public static final Dop IGET;
    public static final Dop IGET_BOOLEAN;
    public static final Dop IGET_BYTE;
    public static final Dop IGET_CHAR;
    public static final Dop IGET_OBJECT;
    public static final Dop IGET_SHORT;
    public static final Dop IGET_WIDE;
    public static final Dop INSTANCE_OF;
    public static final Dop INT_TO_BYTE;
    public static final Dop INT_TO_CHAR;
    public static final Dop INT_TO_DOUBLE;
    public static final Dop INT_TO_FLOAT;
    public static final Dop INT_TO_LONG;
    public static final Dop INT_TO_SHORT;
    public static final Dop INVOKE_DIRECT;
    public static final Dop INVOKE_DIRECT_RANGE;
    public static final Dop INVOKE_INTERFACE;
    public static final Dop INVOKE_INTERFACE_RANGE;
    public static final Dop INVOKE_STATIC;
    public static final Dop INVOKE_STATIC_RANGE;
    public static final Dop INVOKE_SUPER;
    public static final Dop INVOKE_SUPER_RANGE;
    public static final Dop INVOKE_VIRTUAL;
    public static final Dop INVOKE_VIRTUAL_RANGE;
    public static final Dop IPUT;
    public static final Dop IPUT_BOOLEAN;
    public static final Dop IPUT_BYTE;
    public static final Dop IPUT_CHAR;
    public static final Dop IPUT_OBJECT;
    public static final Dop IPUT_SHORT;
    public static final Dop IPUT_WIDE;
    public static final Dop LONG_TO_DOUBLE;
    public static final Dop LONG_TO_FLOAT;
    public static final Dop LONG_TO_INT;
    public static final Dop MONITOR_ENTER;
    public static final Dop MONITOR_EXIT;
    public static final Dop MOVE;
    public static final Dop MOVE_16;
    public static final Dop MOVE_EXCEPTION;
    public static final Dop MOVE_FROM16;
    public static final Dop MOVE_OBJECT;
    public static final Dop MOVE_OBJECT_16;
    public static final Dop MOVE_OBJECT_FROM16;
    public static final Dop MOVE_RESULT;
    public static final Dop MOVE_RESULT_OBJECT;
    public static final Dop MOVE_RESULT_WIDE;
    public static final Dop MOVE_WIDE;
    public static final Dop MOVE_WIDE_16;
    public static final Dop MOVE_WIDE_FROM16;
    public static final Dop MUL_DOUBLE;
    public static final Dop MUL_DOUBLE_2ADDR;
    public static final Dop MUL_FLOAT;
    public static final Dop MUL_FLOAT_2ADDR;
    public static final Dop MUL_INT;
    public static final Dop MUL_INT_2ADDR;
    public static final Dop MUL_INT_LIT16;
    public static final Dop MUL_INT_LIT8;
    public static final Dop MUL_LONG;
    public static final Dop MUL_LONG_2ADDR;
    public static final Dop NEG_DOUBLE;
    public static final Dop NEG_FLOAT;
    public static final Dop NEG_INT;
    public static final Dop NEG_LONG;
    public static final Dop NEW_ARRAY;
    public static final Dop NEW_INSTANCE;
    public static final Dop NOP;
    public static final Dop NOT_INT;
    public static final Dop NOT_LONG;
    public static final Dop OR_INT;
    public static final Dop OR_INT_2ADDR;
    public static final Dop OR_INT_LIT16;
    public static final Dop OR_INT_LIT8;
    public static final Dop OR_LONG;
    public static final Dop OR_LONG_2ADDR;
    public static final Dop PACKED_SWITCH;
    public static final Dop REM_DOUBLE;
    public static final Dop REM_DOUBLE_2ADDR;
    public static final Dop REM_FLOAT;
    public static final Dop REM_FLOAT_2ADDR;
    public static final Dop REM_INT;
    public static final Dop REM_INT_2ADDR;
    public static final Dop REM_INT_LIT16;
    public static final Dop REM_INT_LIT8;
    public static final Dop REM_LONG;
    public static final Dop REM_LONG_2ADDR;
    public static final Dop RETURN;
    public static final Dop RETURN_OBJECT;
    public static final Dop RETURN_VOID;
    public static final Dop RETURN_WIDE;
    public static final Dop RSUB_INT;
    public static final Dop RSUB_INT_LIT8;
    public static final Dop SGET;
    public static final Dop SGET_BOOLEAN;
    public static final Dop SGET_BYTE;
    public static final Dop SGET_CHAR;
    public static final Dop SGET_OBJECT;
    public static final Dop SGET_SHORT;
    public static final Dop SGET_WIDE;
    public static final Dop SHL_INT;
    public static final Dop SHL_INT_2ADDR;
    public static final Dop SHL_INT_LIT8;
    public static final Dop SHL_LONG;
    public static final Dop SHL_LONG_2ADDR;
    public static final Dop SHR_INT;
    public static final Dop SHR_INT_2ADDR;
    public static final Dop SHR_INT_LIT8;
    public static final Dop SHR_LONG;
    public static final Dop SHR_LONG_2ADDR;
    public static final Dop SPARSE_SWITCH;
    public static final Dop SPECIAL_FORMAT;
    public static final Dop SPUT;
    public static final Dop SPUT_BOOLEAN;
    public static final Dop SPUT_BYTE;
    public static final Dop SPUT_CHAR;
    public static final Dop SPUT_OBJECT;
    public static final Dop SPUT_SHORT;
    public static final Dop SPUT_WIDE;
    public static final Dop SUB_DOUBLE;
    public static final Dop SUB_DOUBLE_2ADDR;
    public static final Dop SUB_FLOAT;
    public static final Dop SUB_FLOAT_2ADDR;
    public static final Dop SUB_INT;
    public static final Dop SUB_INT_2ADDR;
    public static final Dop SUB_LONG;
    public static final Dop SUB_LONG_2ADDR;
    public static final Dop THROW;
    public static final Dop USHR_INT;
    public static final Dop USHR_INT_2ADDR;
    public static final Dop USHR_INT_LIT8;
    public static final Dop USHR_LONG;
    public static final Dop USHR_LONG_2ADDR;
    public static final Dop XOR_INT;
    public static final Dop XOR_INT_2ADDR;
    public static final Dop XOR_INT_LIT16;
    public static final Dop XOR_INT_LIT8;
    public static final Dop XOR_LONG;
    public static final Dop XOR_LONG_2ADDR;

    static {
        Dop dop;
        Dop dop2;
        Dop dop3;
        Dop dop4;
        Dop dop5;
        Dop dop6;
        Dop dop7;
        Dop dop8;
        Dop dop9;
        Dop dop10;
        Dop dop11;
        Dop dop12;
        Dop dop13;
        Dop dop14;
        Dop dop15;
        Dop dop16;
        Dop dop17;
        Dop dop18;
        Dop dop19;
        Dop dop20;
        Dop dop21;
        Dop dop22;
        Dop dop23;
        Dop dop24;
        Dop dop25;
        Dop dop26;
        Dop dop27;
        Dop dop28;
        Dop dop29;
        Dop dop30;
        Dop dop31;
        Dop dop32;
        Dop dop33;
        Dop dop34;
        Dop dop35;
        Dop dop36;
        Dop dop37;
        Dop dop38;
        Dop dop39;
        Dop dop40;
        Dop dop41;
        Dop dop42;
        Dop dop43;
        Dop dop44;
        Dop dop45;
        Dop dop46;
        Dop dop47;
        Dop dop48;
        Dop dop49;
        Dop dop50;
        Dop dop51;
        Dop dop52;
        Dop dop53;
        Dop dop54;
        Dop dop55;
        Dop dop56;
        Dop dop57;
        Dop dop58;
        Dop dop59;
        Dop dop60;
        Dop dop61;
        Dop dop62;
        Dop dop63;
        Dop dop64;
        Dop dop65;
        Dop dop66;
        Dop dop67;
        Dop dop68;
        Dop dop69;
        Dop dop70;
        Dop dop71;
        Dop dop72;
        Dop dop73;
        Dop dop74;
        Dop dop75;
        Dop dop76;
        Dop dop77;
        Dop dop78;
        Dop dop79;
        Dop dop80;
        Dop dop81;
        Dop dop82;
        Dop dop83;
        Dop dop84;
        Dop dop85;
        Dop dop86;
        Dop dop87;
        Dop dop88;
        Dop dop89;
        Dop dop90;
        Dop dop91;
        Dop dop92;
        Dop dop93;
        Dop dop94;
        Dop dop95;
        Dop dop96;
        Dop dop97;
        Dop dop98;
        Dop dop99;
        Dop dop100;
        Dop dop101;
        Dop dop102;
        Dop dop103;
        Dop dop104;
        Dop dop105;
        Dop dop106;
        Dop dop107;
        Dop dop108;
        Dop dop109;
        Dop dop110;
        Dop dop111;
        Dop dop112;
        Dop dop113;
        Dop dop114;
        Dop dop115;
        Dop dop116;
        Dop dop117;
        Dop dop118;
        Dop dop119;
        Dop dop120;
        Dop dop121;
        Dop dop122;
        Dop dop123;
        Dop dop124;
        Dop dop125;
        Dop dop126;
        Dop dop127;
        Dop dop128;
        Dop dop129;
        Dop dop130;
        Dop dop131;
        Dop dop132;
        Dop dop133;
        Dop dop134;
        Dop dop135;
        Dop dop136;
        Dop dop137;
        Dop dop138;
        Dop dop139;
        Dop dop140;
        Dop dop141;
        Dop dop142;
        Dop dop143;
        Dop dop144;
        Dop dop145;
        Dop dop146;
        Dop dop147;
        Dop dop148;
        Dop dop149;
        Dop dop150;
        Dop dop151;
        Dop dop152;
        Dop dop153;
        Dop dop154;
        Dop dop155;
        Dop dop156;
        Dop dop157;
        Dop dop158;
        Dop dop159;
        Dop dop160;
        Dop dop161;
        Dop dop162;
        Dop dop163;
        Dop dop164;
        Dop dop165;
        Dop dop166;
        Dop dop167;
        Dop dop168;
        Dop dop169;
        Dop dop170;
        Dop dop171;
        Dop dop172;
        Dop dop173;
        Dop dop174;
        Dop dop175;
        Dop dop176;
        Dop dop177;
        Dop dop178;
        Dop dop179;
        Dop dop180;
        Dop dop181;
        Dop dop182;
        Dop dop183;
        Dop dop184;
        Dop dop185;
        Dop dop186;
        Dop dop187;
        Dop dop188;
        Dop dop189;
        Dop dop190;
        Dop dop191;
        Dop dop192;
        Dop dop193;
        Dop dop194;
        Dop dop195;
        Dop dop196;
        Dop dop197;
        Dop dop198;
        Dop dop199;
        Dop dop200;
        Dop dop201;
        Dop dop202;
        Dop dop203;
        Dop dop204;
        Dop dop205;
        Dop dop206;
        Dop dop207;
        Dop dop208;
        Dop dop209;
        Dop dop210;
        Dop dop211;
        Dop dop212;
        Dop dop213;
        Dop dop214;
        Dop dop215;
        Dop dop216;
        Dop dop217;
        Dop dop218;
        Dop dop219;
        Dop dop220 = dop;
        Dop dop221 = new Dop(-1, -1, -1, SpecialFormat.THE_ONE, false);
        SPECIAL_FORMAT = dop220;
        Dop dop222 = dop2;
        Dop dop223 = new Dop(0, 0, -1, Form10x.THE_ONE, false);
        NOP = dop222;
        Dop dop224 = dop3;
        Dop dop225 = new Dop(1, 1, 2, Form12x.THE_ONE, true);
        MOVE = dop224;
        Dop dop226 = dop4;
        Dop dop227 = new Dop(2, 1, 3, Form22x.THE_ONE, true);
        MOVE_FROM16 = dop226;
        Dop dop228 = dop5;
        Dop dop229 = new Dop(3, 1, -1, Form32x.THE_ONE, true);
        MOVE_16 = dop228;
        Dop dop230 = dop6;
        Dop dop231 = new Dop(4, 4, 5, Form12x.THE_ONE, true);
        MOVE_WIDE = dop230;
        Dop dop232 = dop7;
        Dop dop233 = new Dop(5, 4, 6, Form22x.THE_ONE, true);
        MOVE_WIDE_FROM16 = dop232;
        Dop dop234 = dop8;
        Dop dop235 = new Dop(6, 4, -1, Form32x.THE_ONE, true);
        MOVE_WIDE_16 = dop234;
        Dop dop236 = dop9;
        Dop dop237 = new Dop(7, 7, 8, Form12x.THE_ONE, true);
        MOVE_OBJECT = dop236;
        Dop dop238 = dop10;
        Dop dop239 = new Dop(8, 7, 9, Form22x.THE_ONE, true);
        MOVE_OBJECT_FROM16 = dop238;
        Dop dop240 = dop11;
        Dop dop241 = new Dop(9, 7, -1, Form32x.THE_ONE, true);
        MOVE_OBJECT_16 = dop240;
        Dop dop242 = dop12;
        Dop dop243 = new Dop(10, 10, -1, Form11x.THE_ONE, true);
        MOVE_RESULT = dop242;
        Dop dop244 = dop13;
        Dop dop245 = new Dop(11, 11, -1, Form11x.THE_ONE, true);
        MOVE_RESULT_WIDE = dop244;
        Dop dop246 = dop14;
        Dop dop247 = new Dop(12, 12, -1, Form11x.THE_ONE, true);
        MOVE_RESULT_OBJECT = dop246;
        Dop dop248 = dop15;
        Dop dop249 = new Dop(13, 13, -1, Form11x.THE_ONE, true);
        MOVE_EXCEPTION = dop248;
        Dop dop250 = dop16;
        Dop dop251 = new Dop(14, 14, -1, Form10x.THE_ONE, false);
        RETURN_VOID = dop250;
        Dop dop252 = dop17;
        Dop dop253 = new Dop(15, 15, -1, Form11x.THE_ONE, false);
        RETURN = dop252;
        Dop dop254 = dop18;
        Dop dop255 = new Dop(16, 16, -1, Form11x.THE_ONE, false);
        RETURN_WIDE = dop254;
        Dop dop256 = dop19;
        Dop dop257 = new Dop(17, 17, -1, Form11x.THE_ONE, false);
        RETURN_OBJECT = dop256;
        Dop dop258 = dop20;
        Dop dop259 = new Dop(18, 20, 19, Form11n.THE_ONE, true);
        CONST_4 = dop258;
        Dop dop260 = dop21;
        Dop dop261 = new Dop(19, 20, 21, Form21s.THE_ONE, true);
        CONST_16 = dop260;
        Dop dop262 = dop22;
        Dop dop263 = new Dop(20, 20, -1, Form31i.THE_ONE, true);
        CONST = dop262;
        Dop dop264 = dop23;
        Dop dop265 = new Dop(21, 20, 20, Form21h.THE_ONE, true);
        CONST_HIGH16 = dop264;
        Dop dop266 = dop24;
        Dop dop267 = new Dop(22, 24, 25, Form21s.THE_ONE, true);
        CONST_WIDE_16 = dop266;
        Dop dop268 = dop25;
        Dop dop269 = new Dop(23, 24, 24, Form31i.THE_ONE, true);
        CONST_WIDE_32 = dop268;
        Dop dop270 = dop26;
        Dop dop271 = new Dop(24, 24, -1, Form51l.THE_ONE, true);
        CONST_WIDE = dop270;
        Dop dop272 = dop27;
        Dop dop273 = new Dop(25, 24, 23, Form21h.THE_ONE, true);
        CONST_WIDE_HIGH16 = dop272;
        Dop dop274 = dop28;
        Dop dop275 = new Dop(26, 26, 27, Form21c.THE_ONE, true);
        CONST_STRING = dop274;
        Dop dop276 = dop29;
        Dop dop277 = new Dop(27, 26, -1, Form31c.THE_ONE, true);
        CONST_STRING_JUMBO = dop276;
        Dop dop278 = dop30;
        Dop dop279 = new Dop(28, 28, -1, Form21c.THE_ONE, true);
        CONST_CLASS = dop278;
        Dop dop280 = dop31;
        Dop dop281 = new Dop(29, 29, -1, Form11x.THE_ONE, false);
        MONITOR_ENTER = dop280;
        Dop dop282 = dop32;
        Dop dop283 = new Dop(30, 30, -1, Form11x.THE_ONE, false);
        MONITOR_EXIT = dop282;
        Dop dop284 = dop33;
        Dop dop285 = new Dop(31, 31, -1, Form21c.THE_ONE, true);
        CHECK_CAST = dop284;
        Dop dop286 = dop34;
        Dop dop287 = new Dop(32, 32, -1, Form22c.THE_ONE, true);
        INSTANCE_OF = dop286;
        Dop dop288 = dop35;
        Dop dop289 = new Dop(33, 33, -1, Form12x.THE_ONE, true);
        ARRAY_LENGTH = dop288;
        Dop dop290 = dop36;
        Dop dop291 = new Dop(34, 34, -1, Form21c.THE_ONE, true);
        NEW_INSTANCE = dop290;
        Dop dop292 = dop37;
        Dop dop293 = new Dop(35, 35, -1, Form22c.THE_ONE, true);
        NEW_ARRAY = dop292;
        Dop dop294 = dop38;
        Dop dop295 = new Dop(36, 36, 37, Form35c.THE_ONE, false);
        FILLED_NEW_ARRAY = dop294;
        Dop dop296 = dop39;
        Dop dop297 = new Dop(37, 36, -1, Form3rc.THE_ONE, false);
        FILLED_NEW_ARRAY_RANGE = dop296;
        Dop dop298 = dop40;
        Dop dop299 = new Dop(38, 38, -1, Form31t.THE_ONE, false);
        FILL_ARRAY_DATA = dop298;
        Dop dop300 = dop41;
        Dop dop301 = new Dop(39, 39, -1, Form11x.THE_ONE, false);
        THROW = dop300;
        Dop dop302 = dop42;
        Dop dop303 = new Dop(40, 40, 41, Form10t.THE_ONE, false);
        GOTO = dop302;
        Dop dop304 = dop43;
        Dop dop305 = new Dop(41, 40, 42, Form20t.THE_ONE, false);
        GOTO_16 = dop304;
        Dop dop306 = dop44;
        Dop dop307 = new Dop(42, 40, -1, Form30t.THE_ONE, false);
        GOTO_32 = dop306;
        Dop dop308 = dop45;
        Dop dop309 = new Dop(43, 43, -1, Form31t.THE_ONE, false);
        PACKED_SWITCH = dop308;
        Dop dop310 = dop46;
        Dop dop311 = new Dop(44, 44, -1, Form31t.THE_ONE, false);
        SPARSE_SWITCH = dop310;
        Dop dop312 = dop47;
        Dop dop313 = new Dop(45, 45, -1, Form23x.THE_ONE, true);
        CMPL_FLOAT = dop312;
        Dop dop314 = dop48;
        Dop dop315 = new Dop(46, 46, -1, Form23x.THE_ONE, true);
        CMPG_FLOAT = dop314;
        Dop dop316 = dop49;
        Dop dop317 = new Dop(47, 47, -1, Form23x.THE_ONE, true);
        CMPL_DOUBLE = dop316;
        Dop dop318 = dop50;
        Dop dop319 = new Dop(48, 48, -1, Form23x.THE_ONE, true);
        CMPG_DOUBLE = dop318;
        Dop dop320 = dop51;
        Dop dop321 = new Dop(49, 49, -1, Form23x.THE_ONE, true);
        CMP_LONG = dop320;
        Dop dop322 = dop52;
        Dop dop323 = new Dop(50, 50, -1, Form22t.THE_ONE, false);
        IF_EQ = dop322;
        Dop dop324 = dop53;
        Dop dop325 = new Dop(51, 51, -1, Form22t.THE_ONE, false);
        IF_NE = dop324;
        Dop dop326 = dop54;
        Dop dop327 = new Dop(52, 52, -1, Form22t.THE_ONE, false);
        IF_LT = dop326;
        Dop dop328 = dop55;
        Dop dop329 = new Dop(53, 53, -1, Form22t.THE_ONE, false);
        IF_GE = dop328;
        Dop dop330 = dop56;
        Dop dop331 = new Dop(54, 54, -1, Form22t.THE_ONE, false);
        IF_GT = dop330;
        Dop dop332 = dop57;
        Dop dop333 = new Dop(55, 55, -1, Form22t.THE_ONE, false);
        IF_LE = dop332;
        Dop dop334 = dop58;
        Dop dop335 = new Dop(56, 56, -1, Form21t.THE_ONE, false);
        IF_EQZ = dop334;
        Dop dop336 = dop59;
        Dop dop337 = new Dop(57, 57, -1, Form21t.THE_ONE, false);
        IF_NEZ = dop336;
        Dop dop338 = dop60;
        Dop dop339 = new Dop(58, 58, -1, Form21t.THE_ONE, false);
        IF_LTZ = dop338;
        Dop dop340 = dop61;
        Dop dop341 = new Dop(59, 59, -1, Form21t.THE_ONE, false);
        IF_GEZ = dop340;
        Dop dop342 = dop62;
        Dop dop343 = new Dop(60, 60, -1, Form21t.THE_ONE, false);
        IF_GTZ = dop342;
        Dop dop344 = dop63;
        Dop dop345 = new Dop(61, 61, -1, Form21t.THE_ONE, false);
        IF_LEZ = dop344;
        Dop dop346 = dop64;
        Dop dop347 = new Dop(68, 68, -1, Form23x.THE_ONE, true);
        AGET = dop346;
        Dop dop348 = dop65;
        Dop dop349 = new Dop(69, 69, -1, Form23x.THE_ONE, true);
        AGET_WIDE = dop348;
        Dop dop350 = dop66;
        Dop dop351 = new Dop(70, 70, -1, Form23x.THE_ONE, true);
        AGET_OBJECT = dop350;
        Dop dop352 = dop67;
        Dop dop353 = new Dop(71, 71, -1, Form23x.THE_ONE, true);
        AGET_BOOLEAN = dop352;
        Dop dop354 = dop68;
        Dop dop355 = new Dop(72, 72, -1, Form23x.THE_ONE, true);
        AGET_BYTE = dop354;
        Dop dop356 = dop69;
        Dop dop357 = new Dop(73, 73, -1, Form23x.THE_ONE, true);
        AGET_CHAR = dop356;
        Dop dop358 = dop70;
        Dop dop359 = new Dop(74, 74, -1, Form23x.THE_ONE, true);
        AGET_SHORT = dop358;
        Dop dop360 = dop71;
        Dop dop361 = new Dop(75, 75, -1, Form23x.THE_ONE, false);
        APUT = dop360;
        Dop dop362 = dop72;
        Dop dop363 = new Dop(76, 76, -1, Form23x.THE_ONE, false);
        APUT_WIDE = dop362;
        Dop dop364 = dop73;
        Dop dop365 = new Dop(77, 77, -1, Form23x.THE_ONE, false);
        APUT_OBJECT = dop364;
        Dop dop366 = dop74;
        Dop dop367 = new Dop(78, 78, -1, Form23x.THE_ONE, false);
        APUT_BOOLEAN = dop366;
        Dop dop368 = dop75;
        Dop dop369 = new Dop(79, 79, -1, Form23x.THE_ONE, false);
        APUT_BYTE = dop368;
        Dop dop370 = dop76;
        Dop dop371 = new Dop(80, 80, -1, Form23x.THE_ONE, false);
        APUT_CHAR = dop370;
        Dop dop372 = dop77;
        Dop dop373 = new Dop(81, 81, -1, Form23x.THE_ONE, false);
        APUT_SHORT = dop372;
        Dop dop374 = dop78;
        Dop dop375 = new Dop(82, 82, -1, Form22c.THE_ONE, true);
        IGET = dop374;
        Dop dop376 = dop79;
        Dop dop377 = new Dop(83, 83, -1, Form22c.THE_ONE, true);
        IGET_WIDE = dop376;
        Dop dop378 = dop80;
        Dop dop379 = new Dop(84, 84, -1, Form22c.THE_ONE, true);
        IGET_OBJECT = dop378;
        Dop dop380 = dop81;
        Dop dop381 = new Dop(85, 85, -1, Form22c.THE_ONE, true);
        IGET_BOOLEAN = dop380;
        Dop dop382 = dop82;
        Dop dop383 = new Dop(86, 86, -1, Form22c.THE_ONE, true);
        IGET_BYTE = dop382;
        Dop dop384 = dop83;
        Dop dop385 = new Dop(87, 87, -1, Form22c.THE_ONE, true);
        IGET_CHAR = dop384;
        Dop dop386 = dop84;
        Dop dop387 = new Dop(88, 88, -1, Form22c.THE_ONE, true);
        IGET_SHORT = dop386;
        Dop dop388 = dop85;
        Dop dop389 = new Dop(89, 89, -1, Form22c.THE_ONE, false);
        IPUT = dop388;
        Dop dop390 = dop86;
        Dop dop391 = new Dop(90, 90, -1, Form22c.THE_ONE, false);
        IPUT_WIDE = dop390;
        Dop dop392 = dop87;
        Dop dop393 = new Dop(91, 91, -1, Form22c.THE_ONE, false);
        IPUT_OBJECT = dop392;
        Dop dop394 = dop88;
        Dop dop395 = new Dop(92, 92, -1, Form22c.THE_ONE, false);
        IPUT_BOOLEAN = dop394;
        Dop dop396 = dop89;
        Dop dop397 = new Dop(93, 93, -1, Form22c.THE_ONE, false);
        IPUT_BYTE = dop396;
        Dop dop398 = dop90;
        Dop dop399 = new Dop(94, 94, -1, Form22c.THE_ONE, false);
        IPUT_CHAR = dop398;
        Dop dop400 = dop91;
        Dop dop401 = new Dop(95, 95, -1, Form22c.THE_ONE, false);
        IPUT_SHORT = dop400;
        Dop dop402 = dop92;
        Dop dop403 = new Dop(96, 96, -1, Form21c.THE_ONE, true);
        SGET = dop402;
        Dop dop404 = dop93;
        Dop dop405 = new Dop(97, 97, -1, Form21c.THE_ONE, true);
        SGET_WIDE = dop404;
        Dop dop406 = dop94;
        Dop dop407 = new Dop(98, 98, -1, Form21c.THE_ONE, true);
        SGET_OBJECT = dop406;
        Dop dop408 = dop95;
        Dop dop409 = new Dop(99, 99, -1, Form21c.THE_ONE, true);
        SGET_BOOLEAN = dop408;
        Dop dop410 = dop96;
        Dop dop411 = new Dop(100, 100, -1, Form21c.THE_ONE, true);
        SGET_BYTE = dop410;
        Dop dop412 = dop97;
        Dop dop413 = new Dop(101, 101, -1, Form21c.THE_ONE, true);
        SGET_CHAR = dop412;
        Dop dop414 = dop98;
        Dop dop415 = new Dop(102, 102, -1, Form21c.THE_ONE, true);
        SGET_SHORT = dop414;
        Dop dop416 = dop99;
        Dop dop417 = new Dop(103, 103, -1, Form21c.THE_ONE, false);
        SPUT = dop416;
        Dop dop418 = dop100;
        Dop dop419 = new Dop(104, 104, -1, Form21c.THE_ONE, false);
        SPUT_WIDE = dop418;
        Dop dop420 = dop101;
        Dop dop421 = new Dop(105, 105, -1, Form21c.THE_ONE, false);
        SPUT_OBJECT = dop420;
        Dop dop422 = dop102;
        Dop dop423 = new Dop(106, 106, -1, Form21c.THE_ONE, false);
        SPUT_BOOLEAN = dop422;
        Dop dop424 = dop103;
        Dop dop425 = new Dop(107, 107, -1, Form21c.THE_ONE, false);
        SPUT_BYTE = dop424;
        Dop dop426 = dop104;
        Dop dop427 = new Dop(108, 108, -1, Form21c.THE_ONE, false);
        SPUT_CHAR = dop426;
        Dop dop428 = dop105;
        Dop dop429 = new Dop(109, 109, -1, Form21c.THE_ONE, false);
        SPUT_SHORT = dop428;
        Dop dop430 = dop106;
        Dop dop431 = new Dop(110, 110, 116, Form35c.THE_ONE, false);
        INVOKE_VIRTUAL = dop430;
        Dop dop432 = dop107;
        Dop dop433 = new Dop(111, 111, 117, Form35c.THE_ONE, false);
        INVOKE_SUPER = dop432;
        Dop dop434 = dop108;
        Dop dop435 = new Dop(112, 112, 118, Form35c.THE_ONE, false);
        INVOKE_DIRECT = dop434;
        Dop dop436 = dop109;
        Dop dop437 = new Dop(113, 113, 119, Form35c.THE_ONE, false);
        INVOKE_STATIC = dop436;
        Dop dop438 = dop110;
        Dop dop439 = new Dop(114, 114, 120, Form35c.THE_ONE, false);
        INVOKE_INTERFACE = dop438;
        Dop dop440 = dop111;
        Dop dop441 = new Dop(116, 110, -1, Form3rc.THE_ONE, false);
        INVOKE_VIRTUAL_RANGE = dop440;
        Dop dop442 = dop112;
        Dop dop443 = new Dop(117, 111, -1, Form3rc.THE_ONE, false);
        INVOKE_SUPER_RANGE = dop442;
        Dop dop444 = dop113;
        Dop dop445 = new Dop(118, 112, -1, Form3rc.THE_ONE, false);
        INVOKE_DIRECT_RANGE = dop444;
        Dop dop446 = dop114;
        Dop dop447 = new Dop(119, 113, -1, Form3rc.THE_ONE, false);
        INVOKE_STATIC_RANGE = dop446;
        Dop dop448 = dop115;
        Dop dop449 = new Dop(120, 114, -1, Form3rc.THE_ONE, false);
        INVOKE_INTERFACE_RANGE = dop448;
        Dop dop450 = dop116;
        Dop dop451 = new Dop(123, 123, -1, Form12x.THE_ONE, true);
        NEG_INT = dop450;
        Dop dop452 = dop117;
        Dop dop453 = new Dop(124, 124, -1, Form12x.THE_ONE, true);
        NOT_INT = dop452;
        Dop dop454 = dop118;
        Dop dop455 = new Dop(125, 125, -1, Form12x.THE_ONE, true);
        NEG_LONG = dop454;
        Dop dop456 = dop119;
        Dop dop457 = new Dop(126, 126, -1, Form12x.THE_ONE, true);
        NOT_LONG = dop456;
        Dop dop458 = dop120;
        Dop dop459 = new Dop(127, 127, -1, Form12x.THE_ONE, true);
        NEG_FLOAT = dop458;
        Dop dop460 = dop121;
        Dop dop461 = new Dop(128, 128, -1, Form12x.THE_ONE, true);
        NEG_DOUBLE = dop460;
        Dop dop462 = dop122;
        Dop dop463 = new Dop(129, 129, -1, Form12x.THE_ONE, true);
        INT_TO_LONG = dop462;
        Dop dop464 = dop123;
        Dop dop465 = new Dop(130, 130, -1, Form12x.THE_ONE, true);
        INT_TO_FLOAT = dop464;
        Dop dop466 = dop124;
        Dop dop467 = new Dop(131, 131, -1, Form12x.THE_ONE, true);
        INT_TO_DOUBLE = dop466;
        Dop dop468 = dop125;
        Dop dop469 = new Dop(132, 132, -1, Form12x.THE_ONE, true);
        LONG_TO_INT = dop468;
        Dop dop470 = dop126;
        Dop dop471 = new Dop(133, 133, -1, Form12x.THE_ONE, true);
        LONG_TO_FLOAT = dop470;
        Dop dop472 = dop127;
        Dop dop473 = new Dop(134, 134, -1, Form12x.THE_ONE, true);
        LONG_TO_DOUBLE = dop472;
        Dop dop474 = dop128;
        Dop dop475 = new Dop(135, 135, -1, Form12x.THE_ONE, true);
        FLOAT_TO_INT = dop474;
        Dop dop476 = dop129;
        Dop dop477 = new Dop(136, 136, -1, Form12x.THE_ONE, true);
        FLOAT_TO_LONG = dop476;
        Dop dop478 = dop130;
        Dop dop479 = new Dop(137, 137, -1, Form12x.THE_ONE, true);
        FLOAT_TO_DOUBLE = dop478;
        Dop dop480 = dop131;
        Dop dop481 = new Dop(138, 138, -1, Form12x.THE_ONE, true);
        DOUBLE_TO_INT = dop480;
        Dop dop482 = dop132;
        Dop dop483 = new Dop(139, 139, -1, Form12x.THE_ONE, true);
        DOUBLE_TO_LONG = dop482;
        Dop dop484 = dop133;
        Dop dop485 = new Dop(140, 140, -1, Form12x.THE_ONE, true);
        DOUBLE_TO_FLOAT = dop484;
        Dop dop486 = dop134;
        Dop dop487 = new Dop(141, 141, -1, Form12x.THE_ONE, true);
        INT_TO_BYTE = dop486;
        Dop dop488 = dop135;
        Dop dop489 = new Dop(142, 142, -1, Form12x.THE_ONE, true);
        INT_TO_CHAR = dop488;
        Dop dop490 = dop136;
        Dop dop491 = new Dop(143, 143, -1, Form12x.THE_ONE, true);
        INT_TO_SHORT = dop490;
        Dop dop492 = dop137;
        Dop dop493 = new Dop(144, 144, -1, Form23x.THE_ONE, true);
        ADD_INT = dop492;
        Dop dop494 = dop138;
        Dop dop495 = new Dop(145, 145, -1, Form23x.THE_ONE, true);
        SUB_INT = dop494;
        Dop dop496 = dop139;
        Dop dop497 = new Dop(146, 146, -1, Form23x.THE_ONE, true);
        MUL_INT = dop496;
        Dop dop498 = dop140;
        Dop dop499 = new Dop(147, 147, -1, Form23x.THE_ONE, true);
        DIV_INT = dop498;
        Dop dop500 = dop141;
        Dop dop501 = new Dop(148, 148, -1, Form23x.THE_ONE, true);
        REM_INT = dop500;
        Dop dop502 = dop142;
        Dop dop503 = new Dop(149, 149, -1, Form23x.THE_ONE, true);
        AND_INT = dop502;
        Dop dop504 = dop143;
        Dop dop505 = new Dop(150, 150, -1, Form23x.THE_ONE, true);
        OR_INT = dop504;
        Dop dop506 = dop144;
        Dop dop507 = new Dop(151, 151, -1, Form23x.THE_ONE, true);
        XOR_INT = dop506;
        Dop dop508 = dop145;
        Dop dop509 = new Dop(152, 152, -1, Form23x.THE_ONE, true);
        SHL_INT = dop508;
        Dop dop510 = dop146;
        Dop dop511 = new Dop(153, 153, -1, Form23x.THE_ONE, true);
        SHR_INT = dop510;
        Dop dop512 = dop147;
        Dop dop513 = new Dop(154, 154, -1, Form23x.THE_ONE, true);
        USHR_INT = dop512;
        Dop dop514 = dop148;
        Dop dop515 = new Dop(155, 155, -1, Form23x.THE_ONE, true);
        ADD_LONG = dop514;
        Dop dop516 = dop149;
        Dop dop517 = new Dop(156, 156, -1, Form23x.THE_ONE, true);
        SUB_LONG = dop516;
        Dop dop518 = dop150;
        Dop dop519 = new Dop(157, 157, -1, Form23x.THE_ONE, true);
        MUL_LONG = dop518;
        Dop dop520 = dop151;
        Dop dop521 = new Dop(158, 158, -1, Form23x.THE_ONE, true);
        DIV_LONG = dop520;
        Dop dop522 = dop152;
        Dop dop523 = new Dop(159, 159, -1, Form23x.THE_ONE, true);
        REM_LONG = dop522;
        Dop dop524 = dop153;
        Dop dop525 = new Dop(160, 160, -1, Form23x.THE_ONE, true);
        AND_LONG = dop524;
        Dop dop526 = dop154;
        Dop dop527 = new Dop(161, 161, -1, Form23x.THE_ONE, true);
        OR_LONG = dop526;
        Dop dop528 = dop155;
        Dop dop529 = new Dop(162, 162, -1, Form23x.THE_ONE, true);
        XOR_LONG = dop528;
        Dop dop530 = dop156;
        Dop dop531 = new Dop(163, 163, -1, Form23x.THE_ONE, true);
        SHL_LONG = dop530;
        Dop dop532 = dop157;
        Dop dop533 = new Dop(164, 164, -1, Form23x.THE_ONE, true);
        SHR_LONG = dop532;
        Dop dop534 = dop158;
        Dop dop535 = new Dop(165, 165, -1, Form23x.THE_ONE, true);
        USHR_LONG = dop534;
        Dop dop536 = dop159;
        Dop dop537 = new Dop(166, 166, -1, Form23x.THE_ONE, true);
        ADD_FLOAT = dop536;
        Dop dop538 = dop160;
        Dop dop539 = new Dop(167, 167, -1, Form23x.THE_ONE, true);
        SUB_FLOAT = dop538;
        Dop dop540 = dop161;
        Dop dop541 = new Dop(168, 168, -1, Form23x.THE_ONE, true);
        MUL_FLOAT = dop540;
        Dop dop542 = dop162;
        Dop dop543 = new Dop(169, 169, -1, Form23x.THE_ONE, true);
        DIV_FLOAT = dop542;
        Dop dop544 = dop163;
        Dop dop545 = new Dop(170, 170, -1, Form23x.THE_ONE, true);
        REM_FLOAT = dop544;
        Dop dop546 = dop164;
        Dop dop547 = new Dop(171, 171, -1, Form23x.THE_ONE, true);
        ADD_DOUBLE = dop546;
        Dop dop548 = dop165;
        Dop dop549 = new Dop(172, 172, -1, Form23x.THE_ONE, true);
        SUB_DOUBLE = dop548;
        Dop dop550 = dop166;
        Dop dop551 = new Dop(173, 173, -1, Form23x.THE_ONE, true);
        MUL_DOUBLE = dop550;
        Dop dop552 = dop167;
        Dop dop553 = new Dop(174, 174, -1, Form23x.THE_ONE, true);
        DIV_DOUBLE = dop552;
        Dop dop554 = dop168;
        Dop dop555 = new Dop(175, 175, -1, Form23x.THE_ONE, true);
        REM_DOUBLE = dop554;
        Dop dop556 = dop169;
        Dop dop557 = new Dop(176, 144, 144, Form12x.THE_ONE, true);
        ADD_INT_2ADDR = dop556;
        Dop dop558 = dop170;
        Dop dop559 = new Dop(177, 145, 145, Form12x.THE_ONE, true);
        SUB_INT_2ADDR = dop558;
        Dop dop560 = dop171;
        Dop dop561 = new Dop(178, 146, 146, Form12x.THE_ONE, true);
        MUL_INT_2ADDR = dop560;
        Dop dop562 = dop172;
        Dop dop563 = new Dop(179, 147, 147, Form12x.THE_ONE, true);
        DIV_INT_2ADDR = dop562;
        Dop dop564 = dop173;
        Dop dop565 = new Dop(180, 148, 148, Form12x.THE_ONE, true);
        REM_INT_2ADDR = dop564;
        Dop dop566 = dop174;
        Dop dop567 = new Dop(181, 149, 149, Form12x.THE_ONE, true);
        AND_INT_2ADDR = dop566;
        Dop dop568 = dop175;
        Dop dop569 = new Dop(182, 150, 150, Form12x.THE_ONE, true);
        OR_INT_2ADDR = dop568;
        Dop dop570 = dop176;
        Dop dop571 = new Dop(183, 151, 151, Form12x.THE_ONE, true);
        XOR_INT_2ADDR = dop570;
        Dop dop572 = dop177;
        Dop dop573 = new Dop(184, 152, 152, Form12x.THE_ONE, true);
        SHL_INT_2ADDR = dop572;
        Dop dop574 = dop178;
        Dop dop575 = new Dop(185, 153, 153, Form12x.THE_ONE, true);
        SHR_INT_2ADDR = dop574;
        Dop dop576 = dop179;
        Dop dop577 = new Dop(186, 154, 154, Form12x.THE_ONE, true);
        USHR_INT_2ADDR = dop576;
        Dop dop578 = dop180;
        Dop dop579 = new Dop(187, 155, 155, Form12x.THE_ONE, true);
        ADD_LONG_2ADDR = dop578;
        Dop dop580 = dop181;
        Dop dop581 = new Dop(188, 156, 156, Form12x.THE_ONE, true);
        SUB_LONG_2ADDR = dop580;
        Dop dop582 = dop182;
        Dop dop583 = new Dop(189, 157, 157, Form12x.THE_ONE, true);
        MUL_LONG_2ADDR = dop582;
        Dop dop584 = dop183;
        Dop dop585 = new Dop(190, 158, 158, Form12x.THE_ONE, true);
        DIV_LONG_2ADDR = dop584;
        Dop dop586 = dop184;
        Dop dop587 = new Dop(191, 159, 159, Form12x.THE_ONE, true);
        REM_LONG_2ADDR = dop586;
        Dop dop588 = dop185;
        Dop dop589 = new Dop(192, 160, 160, Form12x.THE_ONE, true);
        AND_LONG_2ADDR = dop588;
        Dop dop590 = dop186;
        Dop dop591 = new Dop(193, 161, 161, Form12x.THE_ONE, true);
        OR_LONG_2ADDR = dop590;
        Dop dop592 = dop187;
        Dop dop593 = new Dop(194, 162, 162, Form12x.THE_ONE, true);
        XOR_LONG_2ADDR = dop592;
        Dop dop594 = dop188;
        Dop dop595 = new Dop(195, 163, 163, Form12x.THE_ONE, true);
        SHL_LONG_2ADDR = dop594;
        Dop dop596 = dop189;
        Dop dop597 = new Dop(196, 164, 164, Form12x.THE_ONE, true);
        SHR_LONG_2ADDR = dop596;
        Dop dop598 = dop190;
        Dop dop599 = new Dop(197, 165, 165, Form12x.THE_ONE, true);
        USHR_LONG_2ADDR = dop598;
        Dop dop600 = dop191;
        Dop dop601 = new Dop(198, 166, 166, Form12x.THE_ONE, true);
        ADD_FLOAT_2ADDR = dop600;
        Dop dop602 = dop192;
        Dop dop603 = new Dop(199, 167, 167, Form12x.THE_ONE, true);
        SUB_FLOAT_2ADDR = dop602;
        Dop dop604 = dop193;
        Dop dop605 = new Dop(200, 168, 168, Form12x.THE_ONE, true);
        MUL_FLOAT_2ADDR = dop604;
        Dop dop606 = dop194;
        Dop dop607 = new Dop(201, 169, 169, Form12x.THE_ONE, true);
        DIV_FLOAT_2ADDR = dop606;
        Dop dop608 = dop195;
        Dop dop609 = new Dop(202, 170, 170, Form12x.THE_ONE, true);
        REM_FLOAT_2ADDR = dop608;
        Dop dop610 = dop196;
        Dop dop611 = new Dop(203, 171, 171, Form12x.THE_ONE, true);
        ADD_DOUBLE_2ADDR = dop610;
        Dop dop612 = dop197;
        Dop dop613 = new Dop(204, 172, 172, Form12x.THE_ONE, true);
        SUB_DOUBLE_2ADDR = dop612;
        Dop dop614 = dop198;
        Dop dop615 = new Dop(205, 173, 173, Form12x.THE_ONE, true);
        MUL_DOUBLE_2ADDR = dop614;
        Dop dop616 = dop199;
        Dop dop617 = new Dop(206, 174, 174, Form12x.THE_ONE, true);
        DIV_DOUBLE_2ADDR = dop616;
        Dop dop618 = dop200;
        Dop dop619 = new Dop(207, 175, 175, Form12x.THE_ONE, true);
        REM_DOUBLE_2ADDR = dop618;
        Dop dop620 = dop201;
        Dop dop621 = new Dop(208, 144, -1, Form22s.THE_ONE, true);
        ADD_INT_LIT16 = dop620;
        Dop dop622 = dop202;
        Dop dop623 = new Dop(209, 209, -1, Form22s.THE_ONE, true);
        RSUB_INT = dop622;
        Dop dop624 = dop203;
        Dop dop625 = new Dop(210, 146, -1, Form22s.THE_ONE, true);
        MUL_INT_LIT16 = dop624;
        Dop dop626 = dop204;
        Dop dop627 = new Dop(211, 147, -1, Form22s.THE_ONE, true);
        DIV_INT_LIT16 = dop626;
        Dop dop628 = dop205;
        Dop dop629 = new Dop(212, 148, -1, Form22s.THE_ONE, true);
        REM_INT_LIT16 = dop628;
        Dop dop630 = dop206;
        Dop dop631 = new Dop(213, 149, -1, Form22s.THE_ONE, true);
        AND_INT_LIT16 = dop630;
        Dop dop632 = dop207;
        Dop dop633 = new Dop(214, 150, -1, Form22s.THE_ONE, true);
        OR_INT_LIT16 = dop632;
        Dop dop634 = dop208;
        Dop dop635 = new Dop(215, 151, -1, Form22s.THE_ONE, true);
        XOR_INT_LIT16 = dop634;
        Dop dop636 = dop209;
        Dop dop637 = new Dop(216, 144, 208, Form22b.THE_ONE, true);
        ADD_INT_LIT8 = dop636;
        Dop dop638 = dop210;
        Dop dop639 = new Dop(217, 209, 209, Form22b.THE_ONE, true);
        RSUB_INT_LIT8 = dop638;
        Dop dop640 = dop211;
        Dop dop641 = new Dop(218, 146, 210, Form22b.THE_ONE, true);
        MUL_INT_LIT8 = dop640;
        Dop dop642 = dop212;
        Dop dop643 = new Dop(219, 147, 211, Form22b.THE_ONE, true);
        DIV_INT_LIT8 = dop642;
        Dop dop644 = dop213;
        Dop dop645 = new Dop(220, 148, 212, Form22b.THE_ONE, true);
        REM_INT_LIT8 = dop644;
        Dop dop646 = dop214;
        Dop dop647 = new Dop(221, 149, 213, Form22b.THE_ONE, true);
        AND_INT_LIT8 = dop646;
        Dop dop648 = dop215;
        Dop dop649 = new Dop(222, 150, 214, Form22b.THE_ONE, true);
        OR_INT_LIT8 = dop648;
        Dop dop650 = dop216;
        Dop dop651 = new Dop(223, 151, 215, Form22b.THE_ONE, true);
        XOR_INT_LIT8 = dop650;
        Dop dop652 = dop217;
        Dop dop653 = new Dop(224, 152, -1, Form22b.THE_ONE, true);
        SHL_INT_LIT8 = dop652;
        Dop dop654 = dop218;
        Dop dop655 = new Dop(225, 153, -1, Form22b.THE_ONE, true);
        SHR_INT_LIT8 = dop654;
        Dop dop656 = dop219;
        Dop dop657 = new Dop(226, 154, -1, Form22b.THE_ONE, true);
        USHR_INT_LIT8 = dop656;
        set(SPECIAL_FORMAT);
        set(NOP);
        set(MOVE);
        set(MOVE_FROM16);
        set(MOVE_16);
        set(MOVE_WIDE);
        set(MOVE_WIDE_FROM16);
        set(MOVE_WIDE_16);
        set(MOVE_OBJECT);
        set(MOVE_OBJECT_FROM16);
        set(MOVE_OBJECT_16);
        set(MOVE_RESULT);
        set(MOVE_RESULT_WIDE);
        set(MOVE_RESULT_OBJECT);
        set(MOVE_EXCEPTION);
        set(RETURN_VOID);
        set(RETURN);
        set(RETURN_WIDE);
        set(RETURN_OBJECT);
        set(CONST_4);
        set(CONST_16);
        set(CONST);
        set(CONST_HIGH16);
        set(CONST_WIDE_16);
        set(CONST_WIDE_32);
        set(CONST_WIDE);
        set(CONST_WIDE_HIGH16);
        set(CONST_STRING);
        set(CONST_STRING_JUMBO);
        set(CONST_CLASS);
        set(MONITOR_ENTER);
        set(MONITOR_EXIT);
        set(CHECK_CAST);
        set(INSTANCE_OF);
        set(ARRAY_LENGTH);
        set(NEW_INSTANCE);
        set(NEW_ARRAY);
        set(FILLED_NEW_ARRAY);
        set(FILLED_NEW_ARRAY_RANGE);
        set(FILL_ARRAY_DATA);
        set(THROW);
        set(GOTO);
        set(GOTO_16);
        set(GOTO_32);
        set(PACKED_SWITCH);
        set(SPARSE_SWITCH);
        set(CMPL_FLOAT);
        set(CMPG_FLOAT);
        set(CMPL_DOUBLE);
        set(CMPG_DOUBLE);
        set(CMP_LONG);
        set(IF_EQ);
        set(IF_NE);
        set(IF_LT);
        set(IF_GE);
        set(IF_GT);
        set(IF_LE);
        set(IF_EQZ);
        set(IF_NEZ);
        set(IF_LTZ);
        set(IF_GEZ);
        set(IF_GTZ);
        set(IF_LEZ);
        set(AGET);
        set(AGET_WIDE);
        set(AGET_OBJECT);
        set(AGET_BOOLEAN);
        set(AGET_BYTE);
        set(AGET_CHAR);
        set(AGET_SHORT);
        set(APUT);
        set(APUT_WIDE);
        set(APUT_OBJECT);
        set(APUT_BOOLEAN);
        set(APUT_BYTE);
        set(APUT_CHAR);
        set(APUT_SHORT);
        set(IGET);
        set(IGET_WIDE);
        set(IGET_OBJECT);
        set(IGET_BOOLEAN);
        set(IGET_BYTE);
        set(IGET_CHAR);
        set(IGET_SHORT);
        set(IPUT);
        set(IPUT_WIDE);
        set(IPUT_OBJECT);
        set(IPUT_BOOLEAN);
        set(IPUT_BYTE);
        set(IPUT_CHAR);
        set(IPUT_SHORT);
        set(SGET);
        set(SGET_WIDE);
        set(SGET_OBJECT);
        set(SGET_BOOLEAN);
        set(SGET_BYTE);
        set(SGET_CHAR);
        set(SGET_SHORT);
        set(SPUT);
        set(SPUT_WIDE);
        set(SPUT_OBJECT);
        set(SPUT_BOOLEAN);
        set(SPUT_BYTE);
        set(SPUT_CHAR);
        set(SPUT_SHORT);
        set(INVOKE_VIRTUAL);
        set(INVOKE_SUPER);
        set(INVOKE_DIRECT);
        set(INVOKE_STATIC);
        set(INVOKE_INTERFACE);
        set(INVOKE_VIRTUAL_RANGE);
        set(INVOKE_SUPER_RANGE);
        set(INVOKE_DIRECT_RANGE);
        set(INVOKE_STATIC_RANGE);
        set(INVOKE_INTERFACE_RANGE);
        set(NEG_INT);
        set(NOT_INT);
        set(NEG_LONG);
        set(NOT_LONG);
        set(NEG_FLOAT);
        set(NEG_DOUBLE);
        set(INT_TO_LONG);
        set(INT_TO_FLOAT);
        set(INT_TO_DOUBLE);
        set(LONG_TO_INT);
        set(LONG_TO_FLOAT);
        set(LONG_TO_DOUBLE);
        set(FLOAT_TO_INT);
        set(FLOAT_TO_LONG);
        set(FLOAT_TO_DOUBLE);
        set(DOUBLE_TO_INT);
        set(DOUBLE_TO_LONG);
        set(DOUBLE_TO_FLOAT);
        set(INT_TO_BYTE);
        set(INT_TO_CHAR);
        set(INT_TO_SHORT);
        set(ADD_INT);
        set(SUB_INT);
        set(MUL_INT);
        set(DIV_INT);
        set(REM_INT);
        set(AND_INT);
        set(OR_INT);
        set(XOR_INT);
        set(SHL_INT);
        set(SHR_INT);
        set(USHR_INT);
        set(ADD_LONG);
        set(SUB_LONG);
        set(MUL_LONG);
        set(DIV_LONG);
        set(REM_LONG);
        set(AND_LONG);
        set(OR_LONG);
        set(XOR_LONG);
        set(SHL_LONG);
        set(SHR_LONG);
        set(USHR_LONG);
        set(ADD_FLOAT);
        set(SUB_FLOAT);
        set(MUL_FLOAT);
        set(DIV_FLOAT);
        set(REM_FLOAT);
        set(ADD_DOUBLE);
        set(SUB_DOUBLE);
        set(MUL_DOUBLE);
        set(DIV_DOUBLE);
        set(REM_DOUBLE);
        set(ADD_INT_2ADDR);
        set(SUB_INT_2ADDR);
        set(MUL_INT_2ADDR);
        set(DIV_INT_2ADDR);
        set(REM_INT_2ADDR);
        set(AND_INT_2ADDR);
        set(OR_INT_2ADDR);
        set(XOR_INT_2ADDR);
        set(SHL_INT_2ADDR);
        set(SHR_INT_2ADDR);
        set(USHR_INT_2ADDR);
        set(ADD_LONG_2ADDR);
        set(SUB_LONG_2ADDR);
        set(MUL_LONG_2ADDR);
        set(DIV_LONG_2ADDR);
        set(REM_LONG_2ADDR);
        set(AND_LONG_2ADDR);
        set(OR_LONG_2ADDR);
        set(XOR_LONG_2ADDR);
        set(SHL_LONG_2ADDR);
        set(SHR_LONG_2ADDR);
        set(USHR_LONG_2ADDR);
        set(ADD_FLOAT_2ADDR);
        set(SUB_FLOAT_2ADDR);
        set(MUL_FLOAT_2ADDR);
        set(DIV_FLOAT_2ADDR);
        set(REM_FLOAT_2ADDR);
        set(ADD_DOUBLE_2ADDR);
        set(SUB_DOUBLE_2ADDR);
        set(MUL_DOUBLE_2ADDR);
        set(DIV_DOUBLE_2ADDR);
        set(REM_DOUBLE_2ADDR);
        set(ADD_INT_LIT16);
        set(RSUB_INT);
        set(MUL_INT_LIT16);
        set(DIV_INT_LIT16);
        set(REM_INT_LIT16);
        set(AND_INT_LIT16);
        set(OR_INT_LIT16);
        set(XOR_INT_LIT16);
        set(ADD_INT_LIT8);
        set(RSUB_INT_LIT8);
        set(MUL_INT_LIT8);
        set(DIV_INT_LIT8);
        set(REM_INT_LIT8);
        set(AND_INT_LIT8);
        set(OR_INT_LIT8);
        set(XOR_INT_LIT8);
        set(SHL_INT_LIT8);
        set(SHR_INT_LIT8);
        set(USHR_INT_LIT8);
    }

    private Dops() {
    }

    public static Dop get(int i) {
        IllegalArgumentException illegalArgumentException;
        try {
            Dop dop = DOPS[i + 1];
            if (dop != null) {
                return dop;
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException = e;
        }
        IllegalArgumentException illegalArgumentException2 = illegalArgumentException;
        IllegalArgumentException illegalArgumentException3 = new IllegalArgumentException("bogus opcode");
        throw illegalArgumentException2;
    }

    public static Dop getNextOrNull(Dop dop, DexOptions dexOptions) {
        DexOptions dexOptions2 = dexOptions;
        int nextOpcode = dop.getNextOpcode();
        if (nextOpcode == -1) {
            return null;
        }
        return get(nextOpcode);
    }

    private static void set(Dop dop) {
        Dop dop2 = dop;
        DOPS[1 + dop2.getOpcode()] = dop2;
    }
}
