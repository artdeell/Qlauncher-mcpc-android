package com.google.android.gms.common.api.internal;

import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResult.zza;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import java.util.concurrent.TimeUnit;

public final class zzr<R extends Result> extends OptionalPendingResult<R> {
    private final zzb<R> zzaiy;

    public zzr(PendingResult<R> pendingResult) {
        IllegalArgumentException illegalArgumentException;
        PendingResult<R> pendingResult2 = pendingResult;
        if (!(pendingResult2 instanceof zzb)) {
            IllegalArgumentException illegalArgumentException2 = illegalArgumentException;
            IllegalArgumentException illegalArgumentException3 = new IllegalArgumentException("OptionalPendingResult can only wrap PendingResults generated by an API call.");
            throw illegalArgumentException2;
        }
        this.zzaiy = (zzb) pendingResult2;
    }

    public R await() {
        return this.zzaiy.await();
    }

    public R await(long j, TimeUnit timeUnit) {
        return this.zzaiy.await(j, timeUnit);
    }

    public void cancel() {
        this.zzaiy.cancel();
    }

    public R get() {
        IllegalStateException illegalStateException;
        if (isDone()) {
            return await(0, TimeUnit.MILLISECONDS);
        }
        IllegalStateException illegalStateException2 = illegalStateException;
        IllegalStateException illegalStateException3 = new IllegalStateException("Result is not available. Check that isDone() returns true before calling get().");
        throw illegalStateException2;
    }

    public boolean isCanceled() {
        return this.zzaiy.isCanceled();
    }

    public boolean isDone() {
        return this.zzaiy.isReady();
    }

    public void setResultCallback(ResultCallback<? super R> resultCallback) {
        ResultCallback<? super R> resultCallback2 = resultCallback;
        this.zzaiy.setResultCallback(resultCallback2);
    }

    public void setResultCallback(ResultCallback<? super R> resultCallback, long j, TimeUnit timeUnit) {
        ResultCallback<? super R> resultCallback2 = resultCallback;
        long j2 = j;
        TimeUnit timeUnit2 = timeUnit;
        this.zzaiy.setResultCallback(resultCallback2, j2, timeUnit2);
    }

    public void zza(zza zza) {
        zza zza2 = zza;
        this.zzaiy.zza(zza2);
    }

    public Integer zzpa() {
        return this.zzaiy.zzpa();
    }
}
